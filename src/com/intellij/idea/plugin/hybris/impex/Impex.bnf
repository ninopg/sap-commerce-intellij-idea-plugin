/*
 * This file is part of "SAP Commerce Developers Toolset" plugin for IntelliJ IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 * Copyright (C) 2019-2025 EPAM Systems <hybrisideaplugin@epam.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

{
  parserClass="com.intellij.idea.plugin.hybris.impex.ImpexParser"
  parserUtilClass="com.intellij.idea.plugin.hybris.impex.utils.ImpexParserUtils"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Impex"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.idea.plugin.hybris.impex.psi"
  psiImplPackage="com.intellij.idea.plugin.hybris.impex.psi.impl"
  psiImplUtilClass="com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiUtil"

  elementTypeHolderClass="com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes"
  elementTypeClass="com.intellij.idea.plugin.hybris.impex.psi.ImpexElementType"
  tokenTypeClass="com.intellij.idea.plugin.hybris.impex.psi.ImpexTokenType"

  classHeader="generatedFilesHeader.txt"
  implements("user\_rights\_.*_value")="com.intellij.idea.plugin.hybris.impex.psi.ImpexUserRightsValue"

  generate=[java='17']
}

impexFile ::= root*

private root ::= (CRLF | ( !<<eof>> root_group (CRLF | <<eof>> )))
{recoverWhile = recover_root}

private root_group ::= (
      user_rights
    | root_macro_usage
    | header_line
    | value_line
    | script
    | comment
    | (string (';')?)
    | macro_declaration
)
{recoverWhile = not_line_break}


/*#################################################################################*/
/*                                 Recover Rules                                   */
/*#################################################################################*/


private recover_root ::= !(
     CRLF
  |  user_rights_start
  |  HEADER_MODE_INSERT
  |  HEADER_MODE_INSERT_UPDATE
  |  HEADER_MODE_REMOVE
  |  HEADER_MODE_UPDATE
  |  sub_type_name
  |  FIELD_VALUE_SEPARATOR
  |  LINE_COMMENT
  |  macro_name_dec
  |  BEAN_SHELL_MARKER
  |  GROOVY_MARKER
  |  JAVASCRIPT_MARKER
  |  DOUBLE_STRING
  |  SINGLE_STRING
  |  MACRO_USAGE
)

private not_line_break ::= !(CRLF)
private not_line_break_or_parameters_separator ::= !(CRLF | PARAMETERS_SEPARATOR | MULTILINE_SEPARATOR)
private recover_parameter_name ::= !(LEFT_SQUARE_BRACKET | LEFT_ROUND_BRACKET | PARAMETERS_SEPARATOR | CRLF)
private recover_header_type ::= !(LEFT_SQUARE_BRACKET | PARAMETERS_SEPARATOR | CRLF)
private recover_parameters ::= !(CRLF | LEFT_SQUARE_BRACKET | PARAMETERS_SEPARATOR)
private recover_modifiers ::= !(ALTERNATIVE_PATTERN | COMMA | CRLF | LEFT_SQUARE_BRACKET | PARAMETERS_SEPARATOR | RIGHT_ROUND_BRACKET | LEFT_ROUND_BRACKET)

/*#################################################################################*/
/*                                     User Rights                                 */
/*#################################################################################*/
user_rights ::= user_rights_start (PARAMETERS_SEPARATOR)* CRLF+ user_rights_body user_rights_end {
    pin=1
    recoverWhile=recover_root
    methods=[getValueGroups]
}

private user_rights_body ::= (user_rights_header_line CRLF+) (user_rights_value_line CRLF+)*
// this mapping may enable multiple Header lines
// ((user_rights_header_line CRLF+) (user_rights_value_line CRLF+)*)*
{
    recoverWhile=user_rights_body_recover
}
private user_rights_body_recover ::= !(user_rights_end)

user_rights_header_line ::= user_rights_header_parameter (PARAMETERS_SEPARATOR user_rights_header_parameter)*  {
    pin=1
    recoverWhile=not_line_break
    methods=[getHeaderParameter]
}
user_rights_start ::= START_USERRIGHTS
user_rights_end ::= END_USERRIGHTS (PARAMETERS_SEPARATOR)*
user_rights_header_parameter ::= TYPE
 | UID
 | MEMBEROFGROUPS
 | PASSWORD
 | TARGET
 | PERMISSION
{
    recoverWhile=not_line_break_or_parameters_separator
    methods=[getHeaderLine getColumnNumber getValueGroups]
}

user_rights_value_line ::= user_rights_first_value_group? user_rights_value_group+ {
    recoverWhile=not_line_break
    methods=[getValueGroup getHeaderLine]
}

user_rights_first_value_group ::= user_rights_value {
    recoverWhile=user_rights_value_group_recover
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexUserRightsFirstValueGroupMixin"
    methods=[getValueLine]
}

user_rights_value_group ::= FIELD_VALUE_SEPARATOR user_rights_value? {
    pin=1
    recoverWhile=user_rights_value_group_recover
    methods=[getValueLine getColumnNumber getHeaderParameter]
}
private user_rights_value ::= user_rights_type_attribute_value
    | user_rights_permission_value
    | user_rights_multi_value
    | user_rights_single_value {
    recoverWhile=user_rights_value_recover
}
private user_rights_type_attribute_value ::= user_rights_single_value DOT user_rights_attribute_value {
    pin=2
}
user_rights_permission_value ::= PERMISSION_DENIED | PERMISSION_ALLOWED | DOT {
    methods=[getHeaderParameter]
}
user_rights_multi_value ::= FIELD_VALUE (COMMA FIELD_VALUE)+ {
    methods=[getHeaderParameter]
}
user_rights_single_value ::= FIELD_VALUE {
    methods=[getHeaderParameter]
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexUserRightsSingleValueMixin"
}
user_rights_attribute_value ::= FIELD_VALUE {
    methods=[getHeaderParameter]
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexUserRightsAttributeValueMixin"
}

private user_rights_value_recover ::= !(CRLF | FIELD_VALUE_SEPARATOR)
private user_rights_value_group_recover ::= !(CRLF | FIELD_VALUE_SEPARATOR)
/*#################################################################################*/
/*                                     Root                                        */
/*#################################################################################*/

root_macro_usage ::= MACRO_USAGE FIELD_VALUE_SEPARATOR*

header_line ::= any_header_mode full_header_type ((PARAMETERS_SEPARATOR MULTILINE_SEPARATOR? full_header_parameter) | PARAMETERS_SEPARATOR)*
{
    pin = 1
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexHeaderLineMixin"
    methods=[getFullHeaderParameter getValueLines getTableRange getUniqueFullHeaderParameters]
}

comment ::= LINE_COMMENT
{pin = 1}

macro_value_dec ::= MACRO_VALUE

macro_declaration ::=  macro_name_dec ASSIGN_VALUE (
      macro_value_dec
    | string
    | HEADER_SPECIAL_PARAMETER_NAME
    | macro_usage_dec
    | LEFT_ROUND_BRACKET
    | RIGHT_ROUND_BRACKET
    | LEFT_SQUARE_BRACKET
    | RIGHT_SQUARE_BRACKET
    | ASSIGN_VALUE
    | DIGIT
    | BOOLEAN
    | FIELD_VALUE_IGNORE
    | FIELD_VALUE_NULL
    | COMMA
    | HEADER_MODE_INSERT
    | HEADER_MODE_UPDATE
    | HEADER_MODE_INSERT_UPDATE
    | HEADER_MODE_REMOVE
    )*
{pin = 2}

script ::= GROOVY_MARKER SCRIPT_ACTION? groovy_script_body
    | JAVASCRIPT_MARKER SCRIPT_ACTION? javascript_script_body
    | BEAN_SHELL_MARKER SCRIPT_ACTION? beanshell_script_body
{pin = 1}

beanshell_script_body ::= script_body
groovy_script_body ::= script_body
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexGroovyScriptBodyMixin"
}
javascript_script_body ::= script_body

private script_body ::= (SCRIPT_BODY_VALUE
    | MACRO_USAGE
    | SINGLE_STRING
    | DOUBLE_STRING
    )*

string ::= SINGLE_STRING | DOUBLE_STRING
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexStringMixin"
    methods=[getValueGroup]
}

// Value line rules
value_line ::= (sub_type_name value_group*) | (value_group+) {
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexValueLineMixin"
    methods=[getHeaderLine getValueGroup addValueGroups]
}

value_group ::= FIELD_VALUE_SEPARATOR value? MULTILINE_SEPARATOR?
{
    pin=1
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexValueGroupMixin"
    methods=[getFullHeaderParameter getColumnNumber getValueLine computeValue]
}

value ::= (MULTILINE_SEPARATOR? value_dec)+
    | (FIELD_VALUE_IGNORE | FIELD_VALUE_NULL)
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexValueMixin"
    methods=[getValueGroup getFieldValue]
}

private value_dec ::= FIELD_VALUE
    | FIELD_VALUE_PASSWORD_ENCODING_PREFIX
    | FIELD_VALUE_JAR_PREFIX
    | FIELD_VALUE_EXPLODED_JAR_PREFIX
    | FIELD_VALUE_FILE_PREFIX
    | FIELD_VALUE_ZIP_PREFIX
    | FIELD_VALUE_HTTP_PREFIX
    | FIELD_VALUE_SCRIPT_PREFIX
//    | FIELD_VALUE_URL
    | BOOLEAN
    | DIGIT
    | string
    | macro_usage_dec
    | FIELD_LIST_ITEM_SEPARATOR
    | DEFAULT_PATH_DELIMITER
    | DEFAULT_KEY_VALUE_DELIMITER
    | ALTERNATIVE_MAP_DELIMITER
    | COLLECTION_APPEND_PREFIX
    | COLLECTION_REMOVE_PREFIX
    | COLLECTION_MERGE_PREFIX

macro_usage_dec::=MACRO_USAGE
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexMacroUsageDecMixin"
    implements="com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiNamedElement"
    methods=[getNameIdentifier getConfigPropertyKey resolveValue]
}

macro_name_dec ::= MACRO_NAME_DECLARATION
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexMacroNameDecMixin"
    implements="com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiNamedElement"
    methods=[getNameIdentifier toString resolveValue]
}
/*#################################################################################*/
/*                                 Header Line                                     */
/*#################################################################################*/


any_header_mode ::= HEADER_MODE_INSERT | HEADER_MODE_UPDATE | HEADER_MODE_INSERT_UPDATE | HEADER_MODE_REMOVE


full_header_type ::= header_type_name modifiers?
{recoverWhile = not_line_break_or_parameters_separator}

header_type_name ::= HEADER_TYPE
{
    recoverWhile = recover_header_type
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexHeaderTypeNameMixin"
}

full_header_parameter ::= any_header_parameter_name parameters? modifiers* parameters?
{
    pin=1
    recoverWhile=not_line_break_or_parameters_separator
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexFullHeaderParameterMixin"
    methods=[getHeaderLine getColumnNumber getAttribute getValueGroups]
}

any_header_parameter_name ::= HEADER_PARAMETER_NAME | HEADER_SPECIAL_PARAMETER_NAME | macro_usage_dec | document_id_dec | FUNCTION
{
    recoverWhile = recover_parameter_name
    mixin = "com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexAnyHeaderParameterNameMixin"
    methods=[getHeaderItemTypeName]
}

document_id_dec ::= DOCUMENT_ID
{
    mixin = "com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexDocumentIdDecMixin"
    implements = "com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiNamedElement"
}
document_id_usage ::= DOCUMENT_ID
{
    mixin = "com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexDocumentIdUsageMixin"
}

/*#################################################################################*/
/*                               Parameters Block                                  */
/*#################################################################################*/


parameters ::= LEFT_ROUND_BRACKET (parameter ((COMMA | ALTERNATIVE_PATTERN) parameter)*)? RIGHT_ROUND_BRACKET
{pin = 1 recoverWhile = recover_parameters}

parameter ::= (HEADER_PARAMETER_NAME | macro_usage_dec | document_id_usage | FUNCTION) (sub_parameters | ((DOT)? macro_usage_dec))? modifiers*
{
    pin=1
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexParameterMixin"
    methods=[getReferenceItemTypeName getReferenceName getItemTypeName getInlineTypeName getAttributeName]
}

sub_parameters ::= LEFT_ROUND_BRACKET (parameter ((COMMA | ALTERNATIVE_PATTERN) parameter)*)? RIGHT_ROUND_BRACKET
{pin = 1 extends = parameters}

/*#################################################################################*/
/*                                Modifiers Block                                  */
/*#################################################################################*/


modifiers ::= LEFT_SQUARE_BRACKET ((attribute | macro_usage_dec) (ATTRIBUTE_SEPARATOR (attribute | macro_usage_dec))* ) RIGHT_SQUARE_BRACKET
{pin = 1 recoverWhile = recover_modifiers}

attribute ::= any_attribute_name ASSIGN_VALUE any_attribute_value
{pin = 1}

any_attribute_name ::= (ATTRIBUTE_NAME | string)+
{
    mixin = "com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexAttributeNameMixin"
    methods=[getAnyAttributeValue]
}

any_attribute_value ::= (
  ATTRIBUTE_VALUE
  | DIGIT
  | BOOLEAN
  | string
  | macro_usage_dec
)+
{
    mixin = "com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexAttributeValueMixin"
    methods=[getAnyAttributeName]
}

sub_type_name ::= VALUE_SUBTYPE {
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexSubTypeNameMixin"
    methods=[getValueLine getHeaderTypeName]
}